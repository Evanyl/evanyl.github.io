import Brick from "./brick.js";

export default class LevelHandler {
	constructor() {

	}

	buildLevel(level) {
		let bricks = [];
		let position = {};
		level.forEach((row, rowIndex) => {
			row.forEach((brick, brickIndex) => {
			if (brick === 1) {
					position = {
						x: 80 * brickIndex,
						y: 20 * rowIndex
					}
					bricks.push(new Brick(position));
				}
			});
		});

		return bricks;
	}
}

export function buildLevel(level) {
	let bricks = [];
	let position = {};
	level.forEach((row, rowIndex) => {
		row.forEach((brick, brickIndex) => {
			if (brick === 1) {
				position = {
					x: 80 * brickIndex,
					y: 20 * rowIndex
				}
				bricks.push(new Brick(position));
			}
		});
	});

	return bricks;
}


// 10 across, 20 up and down
export const levels = [
	[
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[1,1,1,1,1,1,1,1,1,1],
	[1,1,1,1,1,1,1,1,1,1],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0]
	],

	[
	[0,1,0,1,0,1,0,1,0,1],
	[1,0,1,0,1,0,1,0,1,0],
	[0,1,0,1,0,1,0,1,0,1],
	[1,0,1,0,1,0,1,0,1,0],
	[0,1,0,1,0,1,0,1,0,1],
	[1,0,1,0,1,0,1,0,1,0],
	[0,1,0,1,0,1,0,1,0,1],
	[1,0,1,0,1,0,1,0,1,0],
	[0,1,0,1,0,1,0,1,0,1],
	[1,0,1,0,1,0,1,0,1,0],
	[0,1,0,1,0,1,0,1,0,1],
	[1,0,1,0,1,0,1,0,1,0],
	[0,1,0,1,0,1,0,1,0,1],
	[1,0,1,0,1,0,1,0,1,0],
	[0,1,0,1,0,1,0,1,0,1],
	[1,0,1,0,1,0,1,0,1,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0]
	]
];

/* TEMPLATE
[
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0]
];
*/